//couldn't get OS subroutine Memory.alloc to follow the interface of Array.alloc(int)
//based on implementation from https://github.com/havivha/Nand2Tetris/blob/master/12/Memory.jack by havivha

class Memory {
    static Array memory;
    static Array freeList;
    static Array NO_BLOCK;
    
    static int FL_LENGTH; 
    static int FL_NEXT; 
    
    static int ALLOC_SIZE;
    
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let NO_BLOCK = 16384;   
        let FL_LENGTH = 0;
        let FL_NEXT = 1;
        let ALLOC_SIZE = -1;
        let freeList[FL_LENGTH] = 16384-2048;
        let freeList[FL_NEXT] = null;
        return;
    }

    function int peek(int address) {
        return memory[address];
    }

    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    function Array alloc(int size) {
        var Array prev_block;
        var Array found_block;
        
        let prev_block = Memory.best_fit(size);            
        if( prev_block = NO_BLOCK ) {
            let found_block = null;
        }
        else {
            if( prev_block = null ) {
                let found_block = freeList;                 
                let freeList = Memory.do_alloc(found_block, size); 
            }
            else {
                let found_block = prev_block[FL_NEXT];
                let prev_block[FL_NEXT] = Memory.do_alloc(found_block, size);
            }
        }
        return found_block+1;
    }
    
    // Find the block with the best fit
    function Array best_fit(int size) {
        var Array best_block;
        var Array prev_block;
        var Array cur_block;
        var int best_size;
        var int cur_size;
        
        let best_block = NO_BLOCK;
        let best_size = 16384 - 2048;
        let cur_block = freeList;
        let prev_block = null;
        
        while( ~(cur_block = null) ) {
            let cur_size = cur_block[FL_LENGTH] - 1;
            if( ~(cur_size < size) & (cur_size < best_size) ) {
                let best_block = prev_block;
                let best_size = cur_size;
            }
            let prev_block = cur_block;
            let cur_block = cur_block[FL_NEXT];
        }
        
        return best_block;
    }

    function Array do_alloc(Array found_block, int size) {
        var Array next_block;
        var int block_size;
        
        if( found_block[FL_LENGTH] > (size+1+2) ) {
            let next_block = found_block + size+1;
            let next_block[FL_NEXT] = found_block[FL_NEXT];
            let next_block[FL_LENGTH] = found_block[FL_LENGTH] - (next_block - found_block);
            let found_block = found_block + 1;
            let found_block[ALLOC_SIZE] = size+1;
        }
        else {   
            let next_block = found_block[FL_NEXT];
            let block_size = found_block[FL_LENGTH];
            let found_block = found_block + 1;   
            let found_block[ALLOC_SIZE] = block_size;
        }
        
        return next_block;
    }
    function void deAlloc(Array object) {
        var int alloc_size;
        var Array prev_block;
        var Array next_block;
        
        let alloc_size = object[ALLOC_SIZE];
        let object = object - 1;       
        let prev_block = Memory.find_prev_free(object);
        
        if( prev_block = null ) {      
            let object[FL_LENGTH] = alloc_size;
            let object[FL_NEXT] = freeList;
            let freeList = object;
            let prev_block = object;
        }
        else {
            if( (prev_block + prev_block[FL_LENGTH]) = object ) {
                let prev_block[FL_LENGTH] = prev_block[FL_LENGTH] + alloc_size;
            }
            else {
                let object[FL_LENGTH] = alloc_size;
                let object[FL_NEXT] = prev_block[FL_NEXT];
                let prev_block[FL_NEXT] = object;
                let prev_block = object;
            }
        }
        
        if( (prev_block + prev_block[FL_LENGTH]) = prev_block[FL_NEXT] ) {
            let next_block = prev_block[FL_NEXT];
            let prev_block[FL_LENGTH] = prev_block[FL_LENGTH] + next_block[FL_LENGTH];
            let prev_block[FL_NEXT] = next_block[FL_NEXT];
        }
        return;
    }    
    
    function Array find_prev_free(Array object) {
        var Array block;
        
        if( freeList > object ) {
            return null;
        }
        
        let block = freeList;
        while( ~(block[FL_NEXT] = null) & (block[FL_NEXT] < object) ) {
            let block = block[FL_NEXT];
        }
        return block;
    }
}